INFO:    PSCI Power Domain Map:
INFO:      Domain Node : Level 1, parent_node -1, State ON (0x0)
INFO:      Domain Node : Level 0, parent_node 0, State ON (0x0)
INFO:      CPU Node : MPID 0x0, parent_node 0, State ON (0x0)
INFO:      CPU Node : MPID 0x1, parent_node 0, State ON (0x0)
NOTICE:  CPU: STM32MP157DAA Rev.Z
NOTICE:  Model: STMicroelectronics STM32MP157D eval daughter
INFO:    Reset reason (0x54):
INFO:      System reset generated by MPU (MPSYSRST)
INFO:    Using EMMC
INFO:      Instance 2
INFO:    Boot used partition fsbl1
NOTICE:  BL2: v2.2-r1.0(debug):d5cfc8c-dirty
NOTICE:  BL2: Built : 05:28:00, Jun 28 2021
INFO:    Using crypto library 'stm32_crypto_lib'
INFO:    BL2: Doing platform setup
INFO:    RAM: DDR3-DDR3L 32bits 533000Khz
INFO:    Memory size = 0x40000000 (1024 MB)
INFO:    BL2 runs SP_MIN setup
INFO:    BL2: Loading image id 4
INFO:    Loading image id=4 at address 0x2ffed000
INFO:    Image id=4 loaded: 0x2ffed000 - 0x2ffff000
INFO:    BL2: Loading image id 5
INFO:    Loading image id=5 at address 0xc0100000
INFO:    STM32 Image size : 866796
INFO:    Image id=5 loaded: 0xc0100000 - 0xc01d39ec
WARNING: Skip signature check (header option)
NOTICE:  ROTPK is not deployed on platform. Skipping ROTPK verification.
NOTICE:  BL2: Booting BL32
INFO:    Entry point address = 0x2ffed000
INFO:    SPSR = 0x1d3
INFO:    Cannot find st,stpmic1 node in DT
NOTICE:  SP_MIN: v2.2-r1.0(debug):d5cfc8c-dirty
NOTICE:  SP_MIN: Built : 05:28:01, Jun 28 2021
INFO:    ARM GICv2 driver initialized
INFO:    stm32mp IWDG1 (12): Secure
INFO:    ETZPC: CRYP1 (9) could be non secure
INFO:    SP_MIN: Initializing runtime services
INFO:    SP_MIN: Preparing exit to normal world


U-Boot 2020.01-stm32mp-r1 (Jul 01 2021 - 10:31:04 +0800)

CPU: STM32MP157DAA Rev.Z
Model: STMicroelectronics STM32MP157D eval daughter
Board: stm32mp1 in trusted mode (st,stm32mp157d-atk)
DRAM:  1 GiB
Clocks:
- MPU : 800 MHz
- MCU : 208.878 MHz
- AXI : 266.500 MHz
- PER : 24 MHz
- DDR : 533 MHz
WDT:   Started with servicing (32s timeout)
NAND:  0 MiB
MMC:   STM32 SD/MMC: 0, STM32 SD/MMC: 1
Loading Environment from MMC... OK
In:    serial
Out:   serial
Err:   serial
invalid MAC address in OTP 00:00:00:00:00:00
Net:
Error: ethernet@5800a000 address not set.
No ethernet found.

lcd_id  = 04
Hit any key to stop autoboot:  0
Boot over mmc1!
switch to partitions #0, OK
mmc1(part 0) is current device
768072 bytes read in 59 ms (12.4 MiB/s)
Scanning mmc 1:2...
Found /mmc1_extlinux/stm32mp157d-atk_extlinux.conf
Retrieving file: /mmc1_extlinux/stm32mp157d-atk_extlinux.conf
805 bytes read in 27 ms (28.3 KiB/s)
Select the boot mode
1:      stm32mp157d-atk
2:      stm32mp157d-atk-hdmi
3:      stm32mp157d-atk-spdif
4:      stm32mp157d-atk-mipi
Enter choice: 1:        stm32mp157d-atk
Retrieving file: /uInitrd
3632241 bytes read in 178 ms (19.5 MiB/s)
Retrieving file: /uImage
8321040 bytes read in 371 ms (21.4 MiB/s)
append: root=/dev/mmcblk2p3 rootwait rw console=ttySTM0,115200
Retrieving file: /stm32mp157d-atk.dtb
74988 bytes read in 30 ms (2.4 MiB/s)
## Booting kernel from Legacy Image at c2000000 ...
   Image Name:   Linux-5.4.31-ged58c42cd
   Created:      2021-08-03   2:35:20 UTC
   Image Type:   ARM Linux Kernel Image (uncompressed)
   Data Size:    8320976 Bytes = 7.9 MiB
   Load Address: c2000040
   Entry Point:  c2000040
   Verifying Checksum ... OK
## Flattened Device Tree blob at c4000000
   Booting using the fdt blob at 0xc4000000
   XIP Kernel Image
   Loading Ramdisk to cfc89000, end cffffc71 ... OK
   Loading Device Tree to cfc73000, end cfc884eb ... OK

Starting kernel ...

[    0.000000] Booting Linux on physical CPU 0x0

DRAM:  1 GiB
Clocks:
- MPU : 800 MHz
- MCU : 208.878 MHz
- AXI : 266.500 MHz
- PER : 24 MHz
- DDR : 533 MHz

root:root
########################################################
系统的结构
########################################################
系统默认是使用yocto编译制作的，启动时间较长
（1）串口
（2）网口
（3）led测试
（4）beep测试也是走的led的框架
（5）按键测试
od -x /dev/input/event1 直接看
（6）lcd测试 arch/arm/boot/dts/stm32mp157d-atk.dts
（7）触摸屏测试 drivers/input/touchscreen
多点触摸跟背光测试
（10）USB HOST测试,6个USB口都是主机口，用来连接USB鼠标
hdparm -t /dev/sda1
（11）USB OTG测试
（12）网络测试
网口这个是自动获取ip用的
（13）CAN
（17）音频播放跟音频录音
（24）USB摄像头测试
（25）SPDIF光口音频测试
（28）HDMI测试
（29）OPENGL测试
root@ATK-MP157:/sys/bus/i2c/devices# glmark2-es2-drm
=======================================================
    glmark2 2017.07
=======================================================
    OpenGL Information
    GL_VENDOR:     Vivante Corporation
    GL_RENDERER:   Vivante GCNano
    GL_VERSION:    OpenGL ES 2.0 V6.4.3.279124
=======================================================
[build] use-vbo=false: FPS: 62 FrameTime: 16.129 ms
显卡帧率最高是可以达到多高，分辨率跟帧率

（8）串口测试
四个串口，ttySTM1-ttySTM4
stty -F /dev/ttySTM1 ispeed 115200 ospeed 115200 cs8
（9）485测试
标准232不能跟485直接连接，232采用三线制，地，RX和TX，485采用两线制A和B，采用差值传输，接口形式和电平不一样
（14）RTC时钟芯片PCF8563，外部接的始终芯片 hwclock -w 3-0051
（15）传感器芯片 ap3216c，这个不是platform的，是杂项设备驱动的
        光强度值，接近距离，红外线强度
（16）icm-20608使用spi来进行连接，3轴加速度和3轴陀螺仪
（18）dht11湿温读一体化传感器，使用i2c来连接。
（19）ds18b20一线总线的温度传感器。
（20）SDIO测试，wifi天线接口
iw wlan0 scan | grep SSID
vi /etc/wpa_supplicant.conf
source ./alientek_sdio_wifi_setup.sh -m softap -d wlan0
（21）SDIO 蓝牙测试
（22）4G模块接口测试
（23）SDIO TF卡测试
（26）AD/DA测试
（27）CPU温度/CPU主频测试

关于freertos，可以查看STM32F429 freeRTOS 开发手册

mcu sram 0x10000000-0x1005FFFF 共384kb，只能在线调试
（1）分配好A7与M4的外设资源，800M主频，双核A7跟一个M4
（2）启动配置成001的单片机启动模式
（3）存储系统，amba ,axi, ahb, apb，看内存地址映射
boot/srams/ram aliases
srams1-srams4	srams4作为dma缓冲区，srams3作为内部IPC缓冲区，这块怎么处理会好一些呢
openamp框架下的m4程序调试
openamp软件框架为开发amp系统提供了必要的API函数
remoteproc允许本地处理器与系统上可用的远程处理器进行通信，本地处理器指A7,远程处理器指M4
cortex-a7	coretex-m7
linux		freertos
linux:remoteproc 加载协处理器固件，打开，关闭或者配置协处理器
	  remoteproc 还添加了rpmsg和virtio设备,通过共享内存向远程CPU发送消息或者从远程CPU接收消息。
	  （1）将.elf文件加载到coretex-m4内核中
	  （2）将.elf文件资源表以设置关联的资源（IPC和内存分割）
	  （3）控制cortex-m4内核启动和关闭。
	  （4）提供监视和调试远程服务。
stm32:rproc
	  （1）向remoteproc框架注册供应商功能
	  （2）处理cortex-a7和cortex-m4关联的平台资源。
	  （3）通过邮箱框架将通知转发到M4
用到的其实就是邮箱跟队列的功能
使用两根USB线一个作为网口一个作为串口就可以了。
（1）直接上传到开发板/lib/firmware目录下自动运行
（2）手动执行
echo xxx  > /sys/class/remoteproc/remoteproc0/firmware
echo start > /sys/class/remoteproc/remoteproc0/state
echo stop > /sys/class/remoteproc/re
moteproc0/state
这个机制内部是怎么启动的
cortex-A7方面的开发：包括驱动，包括应用，直接按照原先那种模式，然后使用串口进行烧写就行
cortex-M4方面的开发：直接使用cube工具出来的系统跟remoteproc来进行通信开发
cortex-A7跟cortex-M4核间通道直接的交互细节，这个 可以看下






